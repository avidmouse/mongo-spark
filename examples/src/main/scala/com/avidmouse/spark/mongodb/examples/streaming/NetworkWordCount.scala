package com.avidmouse.spark.mongodb.examples.streaming

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._

import com.avidmouse.spark.mongodb.Mongo
import com.avidmouse.spark.streaming.mongodb.dstream._

import play.api.libs.json._

/**
 * @author avidmouse
 * @version 0.1, 14-6-25
 */
object NetworkWordCount {
  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port> <mongoURI> <countCollection>")
      System.exit(1)
    }

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(1))

    val mongo = Mongo(args(2))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.map {
      case (word, count) => Json.obj("word" -> word, "count" -> count)
    }.saveAsMongoDocument(mongo.collection(args(3)))

    ssc.start()
    ssc.awaitTermination()
  }

}
